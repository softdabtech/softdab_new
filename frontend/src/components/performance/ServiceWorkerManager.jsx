// ServiceWorkerManager.jsx - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä SW –¥–ª—è LCP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
import { useEffect } from 'react';

const ServiceWorkerManager = () => {
  useEffect(() => {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è SW —Ç–æ–ª—å–∫–æ –≤ production
    if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {
      registerServiceWorker();
    }
  }, []);

  const registerServiceWorker = async () => {
    try {
      console.log('üöÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ Service Worker –¥–ª—è LCP...');
      
      const registration = await navigator.serviceWorker.register('/sw.js', {
        scope: '/'
      });

      console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration.scope);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π SW
      registration.addEventListener('updatefound', () => {
        const newWorker = registration.installing;
        
        newWorker.addEventListener('statechange', () => {
          if (newWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              console.log('üîÑ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è SW –¥–æ—Å—Ç—É–ø–Ω–∞');
              // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
              showUpdateNotification();
            } else {
              console.log('‚úÖ SW —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–ø–µ—Ä–≤—ã–µ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫—ç—à –≥–æ—Ç–æ–≤');
              // –ü–µ—Ä–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –±—É–¥—É—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã
              checkCacheStatus();
            }
          }
        });
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç SW
      navigator.serviceWorker.addEventListener('message', (event) => {
        if (event.data.type === 'CACHE_STATUS') {
          console.log(`üíæ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫—ç—à: ${event.data.criticalResourcesCached} —Ä–µ—Å—É—Ä—Å–æ–≤`);
          console.log(`üì¶ –í–µ—Ä—Å–∏—è –∫—ç—à–∞: ${event.data.cacheVersion}`);
        }
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∑—è—Ç–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–æ–≤—ã–º SW
      if (registration.waiting) {
        registration.waiting.postMessage({ type: 'SKIP_WAITING' });
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
    }
  };

  const checkCacheStatus = () => {
    if (navigator.serviceWorker.controller) {
      const messageChannel = new MessageChannel();
      
      messageChannel.port1.onmessage = (event) => {
        if (event.data.type === 'CACHE_STATUS') {
          console.log('üéØ –°—Ç–∞—Ç—É—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∞ –¥–ª—è LCP:', event.data);
        }
      };

      navigator.serviceWorker.controller.postMessage(
        { type: 'GET_CACHE_STATUS' },
        [messageChannel.port2]
      );
    }
  };

  const showUpdateNotification = () => {
    // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ toast –∏–ª–∏ modal)
    if (window.confirm('–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –û–±–Ω–æ–≤–∏—Ç—å?')) {
      window.location.reload();
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å SW –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    const handleLoad = () => {
      if (navigator.serviceWorker.controller) {
        setTimeout(checkCacheStatus, 1000);
      }
    };

    if (document.readyState === 'complete') {
      handleLoad();
    } else {
      window.addEventListener('load', handleLoad);
      return () => window.removeEventListener('load', handleLoad);
    }
  }, []);

  return null; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç UI
};

export default ServiceWorkerManager;
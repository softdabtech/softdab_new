// EarlyResourceDiscovery.jsx - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è LCP
import { useEffect } from 'react';

const EarlyResourceDiscovery = () => {
  useEffect(() => {
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ LCP
    const criticalResources = [
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è hero —Å–µ–∫—Ü–∏–∏
      { 
        href: '/images/hero-main.webp', 
        as: 'image', 
        type: 'image/webp',
        media: '(min-width: 768px)',
        priority: 'high'
      },
      { 
        href: '/images/hero-mobile.webp', 
        as: 'image', 
        type: 'image/webp',
        media: '(max-width: 767px)',
        priority: 'high'
      },
      // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ JavaScript –º–æ–¥—É–ª–∏
      { 
        href: '/assets/vendor.js', 
        as: 'script',
        priority: 'high'
      },
      { 
        href: '/assets/index.js', 
        as: 'script',
        priority: 'high'
      },
    ];

    // DNS prefetch –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤
    const criticalDomains = [
      'https://fonts.googleapis.com',
      'https://fonts.gstatic.com', 
      'https://api.posthog.com',
      'https://us-assets.i.posthog.com'
    ];

    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ preload links
    criticalResources.forEach(resource => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π link
      const existingLink = document.querySelector(`link[href="${resource.href}"]`);
      if (!existingLink) {
        const link = document.createElement('link');
        link.rel = 'preload';
        link.href = resource.href;
        link.as = resource.as;
        if (resource.type) link.type = resource.type;
        if (resource.media) link.media = resource.media;
        if (resource.priority) link.fetchPriority = resource.priority;
        
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è LCP —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (resource.as === 'image') {
          link.setAttribute('data-lcp-critical', 'true');
        }
        
        document.head.appendChild(link);
      }
    });

    // DNS prefetch –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    criticalDomains.forEach(domain => {
      const existingPrefetch = document.querySelector(`link[href="${domain}"][rel="dns-prefetch"]`);
      if (!existingPrefetch) {
        const link = document.createElement('link');
        link.rel = 'dns-prefetch';
        link.href = domain;
        document.head.appendChild(link);
      }
    });

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è LCP
    const optimizeImagesForLCP = () => {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ viewport
      const images = document.querySelectorAll('img');
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            
            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è LCP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if (entry.intersectionRatio > 0.1) {
              img.loading = 'eager';
              img.fetchPriority = 'high';
              img.setAttribute('data-lcp-candidate', 'true');
            }
            
            observer.unobserve(img);
          }
        });
      }, {
        rootMargin: '50px',
        threshold: [0.1]
      });

      images.forEach(img => observer.observe(img));
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', optimizeImagesForLCP);
    } else {
      optimizeImagesForLCP();
    }

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ LCP
    const monitorLCP = () => {
      if ('PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (entry.entryType === 'largest-contentful-paint') {
              console.log('üéØ LCP —ç–ª–µ–º–µ–Ω—Ç:', entry.element, '–í—Ä–µ–º—è:', entry.startTime.toFixed(0) + 'ms');
              
              // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
              if (entry.startTime > 2500) {
                console.warn('üö® –ö–†–ò–¢–ò–ß–ù–û: LCP –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2.5s!', {
                  element: entry.element,
                  startTime: entry.startTime
                });
              }
            }
          }
        });
        
        observer.observe({ entryTypes: ['largest-contentful-paint'] });
      }
    };

    monitorLCP();

  }, []);

  return null;
};

export default EarlyResourceDiscovery;
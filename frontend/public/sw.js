// sw.js - Critical Service Worker –¥–ª—è LCP < 2.5s
const CACHE_VERSION = 'critical-lcp-v1';
const CRITICAL_CACHE = `${CACHE_VERSION}-critical`;
const RUNTIME_CACHE = `${CACHE_VERSION}-runtime`;

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ LCP
const CRITICAL_RESOURCES = [
  // Critical CSS (–±—É–¥–µ—Ç –∏–Ω–ª–∞–π–Ω, –Ω–æ –∫–∞–∫ backup)
  '/assets/index.css',
  
  // Critical JS chunks
  '/assets/vendor.js',
  '/assets/index.js', 
  
  // Critical —à—Ä–∏—Ñ—Ç—ã –¥–ª—è FCP
  'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap',
  'https://fonts.gstatic.com/s/inter/v12/UcCO3FwrK3iLTeHuS_fvQtMwCp50KnMw2boKoduKmMEVuLyfAZ9hiJ-Ek-_EeA.woff2',
  
  // Critical hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  '/images/hero-bg.webp',
  '/images/hero-mobile.webp',
  '/icons/logo.svg',
  
  // Main HTML
  '/',
  '/index.html'
];

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_STRATEGIES = {
  // Critical CSS/JS - Cache First –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  critical: 'cache-first',
  
  // Images - Cache First —Å Network Fallback
  images: 'cache-first',
  
  // Fonts - Cache First (–ø–æ—á—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ)
  fonts: 'cache-first',
  
  // API - Network First —Å Cache Fallback
  api: 'network-first',
  
  // HTML - Network First –¥–ª—è —Å–≤–µ–∂–µ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  html: 'network-first'
};

// Installation - –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
self.addEventListener('install', (event) => {
  console.log('üöÄ SW: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∞ –¥–ª—è LCP...');
  
  event.waitUntil(
    caches.open(CRITICAL_CACHE)
      .then((cache) => {
        console.log('üéØ SW: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è LCP < 2.5s');
        return cache.addAll(CRITICAL_RESOURCES);
      })
      .then(() => {
        console.log('‚úÖ SW: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
        self.skipWaiting(); // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      })
      .catch((error) => {
        console.error('‚ùå SW: –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      })
  );
});

// Activation - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π
self.addEventListener('activate', (event) => {
  console.log('‚ö° SW: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∞');
  
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (!cacheName.includes(CACHE_VERSION)) {
              console.log('üßπ SW: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('‚úÖ SW: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫—ç—à –∞–∫—Ç–∏–≤–µ–Ω');
        return self.clients.claim(); // –í–∑—è—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      })
  );
});

// Critical Fetch Handler –¥–ª—è LCP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
self.addEventListener('fetch', (event) => {
  const request = event.request;
  const url = new URL(request.url);
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º non-GET –∑–∞–ø—Ä–æ—Å—ã
  if (request.method !== 'GET') {
    return;
  }
  
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤
  if (isCriticalResource(request)) {
    event.respondWith(handleCriticalResource(request));
  } else if (isImageRequest(request)) {
    event.respondWith(handleImageRequest(request));
  } else if (isFontRequest(request)) {
    event.respondWith(handleFontRequest(request));
  } else if (isApiRequest(request)) {
    event.respondWith(handleApiRequest(request));
  } else if (isHtmlRequest(request)) {
    event.respondWith(handleHtmlRequest(request));
  }
});

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è LCP —Ä–µ—Å—É—Ä—Å–æ–≤
async function handleCriticalResource(request) {
  try {
    // Cache First - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è LCP
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      console.log('üéØ SW: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—É—Ä—Å –∏–∑ –∫—ç—à–∞ (LCP):', request.url);
      return cachedResponse;
    }
    
    // Network fallback —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(CRITICAL_CACHE);
      cache.put(request, networkResponse.clone());
      console.log('üíæ SW: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—É—Ä—Å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω:', request.url);
    }
    
    return networkResponse;
  } catch (error) {
    console.error('‚ùå SW: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è LCP
async function handleImageRequest(request) {
  try {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(RUNTIME_CACHE);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.warn('‚ö†Ô∏è SW: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:', request.url);
    // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à—Ä–∏—Ñ—Ç–æ–≤
async function handleFontRequest(request) {
  try {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(CRITICAL_CACHE);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.warn('‚ö†Ô∏è SW: –®—Ä–∏—Ñ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', request.url);
    throw error;
  }
}

// API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async function handleApiRequest(request) {
  try {
    // Network First –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(RUNTIME_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    // Cache fallback
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      console.log('üíæ SW: API –∏–∑ –∫—ç—à–∞:', request.url);
      return cachedResponse;
    }
    throw error;
  }
}

// HTML –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async function handleHtmlRequest(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(RUNTIME_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    throw error;
  }
}

// Utility functions
function isCriticalResource(request) {
  const url = request.url;
  return CRITICAL_RESOURCES.some(resource => 
    url.includes(resource) || url.endsWith(resource)
  );
}

function isImageRequest(request) {
  return request.destination === 'image' || 
         /\.(png|jpg|jpeg|gif|webp|svg)$/i.test(request.url);
}

function isFontRequest(request) {
  return request.destination === 'font' ||
         /\.(woff|woff2|ttf|otf|eot)$/i.test(request.url) ||
         request.url.includes('fonts.gstatic.com');
}

function isApiRequest(request) {
  return request.url.includes('/api/') || 
         request.url.includes('api.softdab.tech');
}

function isHtmlRequest(request) {
  return request.destination === 'document' ||
         request.headers.get('accept')?.includes('text/html');
}

// Performance monitoring
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'GET_CACHE_STATUS') {
    caches.open(CRITICAL_CACHE).then(cache => {
      cache.keys().then(keys => {
        event.ports[0].postMessage({
          type: 'CACHE_STATUS',
          criticalResourcesCached: keys.length,
          cacheVersion: CACHE_VERSION
        });
      });
    });
  }
});
// critical-css-extractor.js - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS
import fs from 'fs';
import path from 'path';

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è above-the-fold –∫–æ–Ω—Ç–µ–Ω—Ç–∞
const CRITICAL_SELECTORS = [
  // Base & reset
  '*', 'html', 'body',
  
  // Critical layout
  '.App', '.min-h-screen', '.flex', '.items-center', '.justify-center',
  '.container', '.mx-auto', '.px-6', '.py-32', '.relative', '.z-10',
  
  // Header –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏
  '.fixed', '.top-0', '.left-0', '.right-0', '.z-50',
  '.bg-white\\/95', '.backdrop-blur-sm', '.border-b', '.border-gray-200',
  '.h-18', '.max-w-7xl', '.justify-between',
  
  // Hero –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏
  '.bg-gradient-to-br', '.from-blue-50', '.to-indigo-100',
  '.text-4xl', '.sm\\:text-5xl', '.md\\:text-7xl',
  '.font-bold', '.text-gray-900', '.text-balance', '.leading-tight',
  '.text-lg', '.sm\\:text-xl', '.md\\:text-2xl', '.text-gray-600',
  '.max-w-4xl', '.leading-relaxed',
  
  // CTA –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏
  '.inline-flex', '.px-8', '.py-4', '.bg-blue-600', '.text-white',
  '.rounded-lg', '.font-semibold', '.hover\\:bg-blue-700',
  '.transition-colors', '.duration-200',
  
  // Trust indicators
  '.space-x-2', '.text-green-500', '.flex-shrink-0',
  
  // Critical responsive
  '@media (max-width: 768px)',
  '.sm\\:px-4', '.sm\\:text-base', '.sm\\:gap-6'
];

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS –∏–∑ –ø–æ–ª–Ω–æ–≥–æ CSS —Ñ–∞–π–ª–∞
function extractCriticalCSS(fullCSSPath, outputPath) {
  try {
    console.log('üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS –¥–ª—è LCP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
    
    const fullCSS = fs.readFileSync(fullCSSPath, 'utf8');
    const criticalCSS = [];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º CSS –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞
    const cssRules = fullCSS.split('}').filter(rule => rule.trim());
    
    cssRules.forEach(rule => {
      const cleanRule = rule.trim() + '}';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—Ä–∞–≤–∏–ª–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      const isCritical = CRITICAL_SELECTORS.some(selector => {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª–µ
        const selectorRegex = new RegExp(selector.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'i');
        return selectorRegex.test(cleanRule);
      });
      
      if (isCritical) {
        criticalCSS.push(cleanRule);
      }
    });
    
    // –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS
    const minifiedCriticalCSS = criticalCSS
      .join('\n')
      .replace(/\s+/g, ' ')           // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/;\s*}/g, '}')         // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
      .replace(/\s*{\s*/g, '{')       // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Å–∫–æ–±–æ–∫
      .replace(/\s*}\s*/g, '}')
      .replace(/\s*,\s*/g, ',')       // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –∑–∞–ø—è—Ç—ã—Ö
      .replace(/:\s*/g, ':')          // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏–π
      .trim();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS
    fs.writeFileSync(outputPath, minifiedCriticalCSS);
    
    const originalSize = (fullCSS.length / 1024).toFixed(2);
    const criticalSize = (minifiedCriticalCSS.length / 1024).toFixed(2);
    const reduction = (((fullCSS.length - minifiedCriticalCSS.length) / fullCSS.length) * 100).toFixed(1);
    
    console.log(`‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS –∏–∑–≤–ª–µ—á–µ–Ω:`);
    console.log(`   –û—Ä–∏–≥–∏–Ω–∞–ª: ${originalSize} KB`);
    console.log(`   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: ${criticalSize} KB`);
    console.log(`   –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: ${reduction}%`);
    
    return minifiedCriticalCSS;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS:', error);
    return '';
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ index.html —Å inline –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º CSS
function injectCriticalCSS(htmlPath, criticalCSS) {
  try {
    let html = fs.readFileSync(htmlPath, 'utf8');
    
    // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π critical CSS block –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
    const criticalCSSBlock = `    <!-- CRITICAL INLINE CSS –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ FCP < 1.8s -->
    <style>
${criticalCSS}
    </style>`;
    
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS
    const existingCSSRegex = /<!-- –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô INLINE CSS.*?<\/style>/s;
    
    if (existingCSSRegex.test(html)) {
      html = html.replace(existingCSSRegex, criticalCSSBlock);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª–æ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ </head>
      html = html.replace('</head>', `${criticalCSSBlock}\n  </head>`);
    }
    
    fs.writeFileSync(htmlPath, html);
    console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π CSS –≤–Ω–µ–¥—Ä–µ–Ω –≤ index.html');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ CSS:', error);
  }
}

// Export –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ build –ø—Ä–æ—Ü–µ—Å—Å–µ
export { extractCriticalCSS, injectCriticalCSS, CRITICAL_SELECTORS };

// CLI usage
if (import.meta.url === `file://${process.argv[1]}`) {
  const [,, fullCSSPath, outputPath, htmlPath] = process.argv;
  
  if (!fullCSSPath) {
    console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node critical-css-extractor.js <–ø—É—Ç—å-–∫-–ø–æ–ª–Ω–æ–º—É-CSS> [–≤—ã—Ö–æ–¥–Ω–æ–π-–ø—É—Ç—å] [–ø—É—Ç—å-–∫-HTML]');
    process.exit(1);
  }
  
  const criticalCSS = extractCriticalCSS(
    fullCSSPath, 
    outputPath || './critical.css'
  );
  
  if (htmlPath && criticalCSS) {
    injectCriticalCSS(htmlPath, criticalCSS);
  }
}